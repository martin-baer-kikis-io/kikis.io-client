

RUNTIME INSTALLATION.


                 Running kikis-autobahn


1 Start crossbar

    Open a terminal for the crossbar server and change directory to the 
    crossbar-starter/crossbar directory.  

        Type:  make start

    The crossbar "logo" should appear along with logging output from the server.


2 Start the 'kikis.exe' aplicataion on the windows box.

    Login to the Windows10 host

    Open a Developer's command prompt

        Run: DevSetup.bat - this may not really be needed...

    Change directory to Documents\kikis-cpp\SRC\Debug

        Type: kikis.exe


3 Run the autobahn-kikis application; back to the linux host

    Open a terminal for running autobahn-kikis Python applications.
    The Python scripts use crossbar and autobahn (on the windows host)  to access
    and manipulate the remote Windows OS user interface.

    Change directory to autobahn-kikis.  This directory will be used
    to run Python RPA scripts.  The Python code will be in the "app"
    subdirectory.


4 Run the 'caller' on the Linux box; this will run the Python scripts found in 'app'.

    Change directory to the autobahn-kikis directory.

        Type:  make start

    That will run the Python script in the 'apps/run' file





                   Building the Caller and Callee


1 Buillding the Caller

    The Caller is the Linux/Python side of the design.  The caller calls the callee.
    There is no build instructions to the Caller, since these are Python apps that are
    interpreted at runtime.  The Python code for the user apps, can be found in the 'apps'
    and 'apps/kikis' directories.


2 Building the Callee

    The callee is the C++ code on the windows host.  It provides a set of remote proceedures
    and registers them with crossbar so that the caller can use them to make remote proceedure
    calls.

    The build environment uses VisualStudio2017 without much alteration.  The code relies on
    third-party software, including:
        
        autobahn 
        autobahn-cpp
        Boost
        googletest - not integrated
        msgpack-c
        openssl
        websockets
        
    These should be built in their separate file tree, and most will be found in
    'Documents\GitHub' except for 'Boost', which is one folder higher in the Documents
    tree.  At this point they should be fairly turn-key, but they don't change much, and are
    not strictly a part of the product development process. They won't be documented
    here. Look at the README file in the 'Documents\GitHub\autobahn=cpp' folder for more
    discussion on building autobahn dependencies.

    The VisualStudio configuration file for the build environment is found int the 
    directory: 'Documents\kikis=cpp'.  To bring up VisualStudio for this build 
    open 'kiks-cpp.sin' from a command prompt or from windows explorer in that folder.
 

    
3 Changing the Callee Build

    The build for VS is started with cmake.  If you want to change the callee build, you
    will need to change the CmakeList file in the directories: 'kikis-cpp' and 'kikis-cpp\SRC'.
    To create the 'sin' file for VS, run cmake in the 'kikis-cpp' folder.
    
    
        
        
        
        
