
from autobahn.twisted.component import Component, run
from autobahn.twisted.util import sleep
from autobahn.wamp.types import RegisterOptions
from twisted.internet.defer import inlineCallbacks, returnValue

# to see how this works on the Crossbar.io side, see the example
# router configuration in:
# https://github.com/crossbario/autobahn-python/blob/master/examples/router/.crossbar/config.json

INPUT_ARRAY_SIZE = 16

#----------------------------------------------------------------------------------

def process_commandline_arguments ( url, realm ):

    # parse command line parameters
    parser = argparse.ArgumentParser()
    parser.add_argument ('-d', '--debug',
                         action='store_true',
                         help='Enable debug output.')

    parser.add_argument ('--url', dest='url',
                         type=six.text_type,
                         default=url,
                         help='The router URL (default: "ws://masterdns.kikis.local:8080/ws").')

    parser.add_argument ('--realm',
                         dest='realm',
                         type=six.text_type,
                         default=realm,
                         help='The realm to join (default: "realm1").')

    return parser.parse_args()

#----------------------------------------------------------------------------------

component = Component(


    args = process_commandline_arguments ( url, realm )

    # start logging
    if args.debug:
        txaio.start_logging(level='debug')
    else:
        txaio.start_logging(level='info')

    # set by Crossbar.io connection configuration
    url   = os.environ.get('CBURL', args.url ) 
    realm = os.environ.get('CBREALM', args.realm )
    print ("CB env url: ", url)
    print ("CB env realm: ", realm)


# pulled in from ClientSession stuff
    # set default values for commandline arguments
    url   = "ws://masterdns.kikis.local:8080/ws"
    realm = "realm1"
    args = process_commandline_arguments ( url, realm )


    # start logging
    if args.debug:
        txaio.start_logging(level='debug')
    else:
        txaio.start_logging(level='info')

    #
    # Crossbar.io connection configuration
    #

    url   = os.environ.get('CBURL', args.url )
    realm = os.environ.get('CBREALM', args.realm )


# pulled off website for Component

    # you can configure multiple transports; here we use two different
    # transports which both exist in the demo router
    transports=[
        {
            u"type": u"websocket",
            #u"url": u"ws://localhost:8080/auth_ws",
            #u"url": u"ws://masterdns.kikis.local:8080/ws",
            u"url": url,
            u"endpoint": {
                u"type": u"tcp",
                u"host": u"masterdns.kikis.local",
                u"port": 8080,
            },
            # you can set various websocket options here if you want
            u"options": {
                u"open_handshake_timeout": 100,
            }
        },
    ],
    # authentication can also be configured (this will only work on
    # the demo router on the first transport above)
    #authentication={
    #    u"cryptosign": {
    #        u'authid': u'alice',
    #        # this key should be loaded from disk, database etc never burned into code like this...
    #        u'privkey': '6e3a302aa67d55ffc2059efeb5cf679470b37a26ae9ac18693b56ea3d0cd331c',
    #    }
    #},
    # must provide a realm
    #realm=u"crossbardemo",
    realm=u"relm1",
)


@component.on_join
@inlineCallbacks
def joined(session, details):
    print("session ready")
    try:
        #res = yield session.call(u'com.kikis.get', 2, 3)
        res = yield self.call(rpc_url, a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15], u'NULL' )
        print("call result: {}".format(res))
    except Exception as e:
        print("call error: {0}".format(e))


if __name__ == "__main__":
    run([component])
