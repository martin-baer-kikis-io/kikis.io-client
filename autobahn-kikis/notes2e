"""

    switching from ApplicationRunner to Component model.

"""

import os
import sys
import argparse
import six
import txaio
import time

from twisted.internet import reactor
from autobahn.twisted.util import sleep
from autobahn.twisted.component import Component, run
from kikis.IUIAutomation_5_13 import process_commandline_arguments
from twisted.internet.defer import inlineCallbacks
#from kikis.ClientSessionWrapper import ClientSession


INPUT_ARRAY_SIZE = 16

#----------------------------------------------------------------------------------

def process_commandline_arguments ( url, realm ):

    # parse command line parameters
    parser = argparse.ArgumentParser()
    parser.add_argument ('-d', '--debug',
                         action='store_true',
                         help='Enable debug output.')

    parser.add_argument ('--url', dest='url',
                         type=six.text_type,
                         default=url,
                         help='The router URL (default: "ws://masterdns.kikis.local:8080/ws").')

    parser.add_argument ('--realm',
                         dest='realm',
                         type=six.text_type,
                         default=realm,
                         help='The realm to join (default: "realm1").')

    return parser.parse_args()

#----------------------------------------------------------------------------------

def get( ld ):


    # get the config from the commandline
    #
    url   = None
    realm = None
    args = process_commandline_arguments ( url, realm )

    # start logging
    #
    if args.debug:
        txaio.start_logging(level='debug')
    else:
        txaio.start_logging(level='info')

    # create the Component
    #
    comp = Component(
        transports=url,
        realm=realm
    )

    extra=session.config.extra
 
    nav_ld = extra[u'nav_ld'] # navigation hops dictionary
    rpc_url  = extra[u'rpc_url']  # 'get' or 'set' instruction
 
    a = []
    for d in nav_ld:
         for key, value in d.items():
             a.append(key)
             a.append(value)
             print('----------------------------')
             print('key: ', key, ' value: ', value)
             print('----------------------------')
 
    alen = len(a)
    print('----------------------------')
    print('length of a:', alen )
    print('----------------------------')
  
    add_nulls = INPUT_ARRAY_SIZE - alen
 
    for x in range(add_nulls):
         a.append(u'NULL')
 

##    comp = Component(
##        transports=url,
##        realm=realm
##    )
#

    @comp.on_join
    def joined(session, details):
        print("session ready")
        try:
            #res = yield session.call(u'com.kikis.get', 2, 3)
            #res = yield session.call(u'com.kikis.get', ld[0], ld[1], ld[2])
            res = yield session.call(rpc_url, a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15], u'NULL' )
            print("call result: {}".format(res))
        except Exception as e:
            print("call error: {0}".format(e))



    #run([comp])



#    extra_dict = {u'nav_ld': ld, u'rpc_url': u'com.kikis.get'}

"""

    component = Component(

        # pulled off website for Component
        # you can configure multiple transports; here we use two different
        # transports which both exist in the demo router
        transports=[
            {
                u"type": u"websocket",
                u"url": url,
                u"endpoint": {
                    u"type": u"tcp",
                    u"host": u"ws://192.168.1.101:8080/ws",
                    u"port": 8080,
                },
                # you can set various websocket options here if you want
                u"options": {
                    u"open_handshake_timeout": 100,
                }
            },
        ],
        # authentication can also be configured (this will only work on
#        # the demo router on the first transport above)
#        authentication={
#            u"cryptosign": {
#               u'authid': u'alice',
#               # this key should be loaded from disk, never burned into code like this...
#               u'privkey': '6e3a302aa67d55ffc2059efeb5cf679470b37a26ae9ac18693b56ea3d0cd331c',
#            }
#        },
#         must provide a realm
#        realm=u"crossbardemo",

        realm=u"realm1",
    )

"""


#    #component = Component(transports=url, realm=realm, )
#
#    component = Component(
#        transports=url,
#        realm=realm,
#    )
#
#    print( "I have created component")
#    print( "url: ",   url )
#    print( "realm: ", realm )
#
#    #component.run(loop=None)
#    comp_d = component._start(reactor)
#
#    run([component], log_level="debug")
#
#    #comp_d = component._start(reactor)
#    #comp_d = component._start(loop=None)
#    #comp_d = component._start()
#
#    #print( "ran component._start")
#    #@inlineCallbacks
#
#
##----------------------------------------------------------------------------------
#
#    print( "can I enter on_join?")
#
#    @component.on_join
#    def joined(session, details):
#        print("session ready")
#
##    run([component])
#
#        print("session:  ", session.config.extra )
#        try:
#
#            #res = yield session.call(u'com.kikis.get', ld[0], ld[1], ld[2])
#            res = yield session.call(rpc_url, a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15], u'NULL' )
#
#            print("call result: {}".format(res))
#
#        except Exception as e:
#            print("call error: {0}".format(e))
#
#    print ("below the on_join block");
#
#----------------------------------------------------------------------------------
#
#from autobahn.twisted.component import Component, run
#from twisted.internet.defer import inlineCallbacks
#
#
#component = Component(...)
#
#@component.on_join
#@inlineCallbacks
#def joined(session, details):
#    print("session ready")
#    try:
#        res = yield session.call(u'com.myapp.add2', 2, 3)
#        print("call result: {}".format(res))
#    except Exception as e:
#        print("call error: {0}".format(e))
